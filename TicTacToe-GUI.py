#! /usr/bin/env python
# -*- coding: utf-8 -*-
# ==============================================================================
# * Copyright (c) 2021 IIJIMA, Tadashi
# *     (IIJIMA Laboratory, Faculty of Science and Technology, Keio University).
# ==============================================================================
# 345678901234567890123456789012345678901234567890123456789012345678901234567890
# ==============================================================================
# 分散AIプログラミング実習[05] 課題　Pythonプログラミングの基礎(1)：
#                                    基本的なアプリケーションの構築
# kadai0501a_Tic_Tac_Toe-OOP.py 三目並べのボード（オブジェクト指向; GUIの導入)
#        2021-05-10 飯島 正 (iijima@ae.keio.ac.jp) 
# ==============================================================================

# ==============================================================================
# ===== モジュールのインポート =================================================
# ----- tkinter (GUI) -----
import tkinter as tk
# ==============================================================================

# ==============================================================================
# ===== 【クラス】 TicTacToe(三目並べ) =========================================
# ==============================================================================
class TicTacToe():
    """ ゲームのモデル(三目並べのボードにとって本質的な部分).

    * ボードの内部状態（どこに，石が打たれているか）
    * 手番(〇の番なのか×の番なのか）
    * 勝敗判定（ゲームのルール）

    Attributes:
        
    """
    # ==========================================================================
    
        
    # ##########################################################################
    # ##### 初期化 #############################################################
    # ##########################################################################
    
    # ==========================================================================
    # ===== 【メソッド(初期化)】 イニシャライザ ================================
    # ==========================================================================
    def __init__( self ):
        """ イニシャライザ.
        """
        # ======================================================================
        # ----- 【属性(状態変数)】 三目並べのボード ----------------------------
        # -----         ※ boardはリスト.
        # -----         ※ 配列ではないので，intと文字列を混在できる.
        # -----         ※ 石が打たれているところには，○か×の文字列.
        # -----         ※ 打たれていないところには，添字を表す整数(1～9).
        self.board = None
        # ======================================================================
        # ----- 【属性(状態変数)】 手番 (0→○の番,1→×の番) ------------------
        self.turn = 0
        # ----- 【属性(状態変数)】 手数 (通し番号; パスのときは進める) ---------
        self.seq = 1
        # ======================================================================
        # ----- 【属性(状態変数)】 対戦結果 (空リストのときは対戦中) -----------
        self.result = None
        # ----- 【属性(状態変数)】 着手可能箇所のリスト ------------------------
        self.possible_cell_list = None
        # ----- 【属性(状態変数)】 勝敗判定結果 --------------------------------
        self.judge = None
        # ======================================================================
        # ----- 【属性(状態変数)】 メッセージ ----------------------------------
        self.message = None
        # ======================================================================
        # ----- 【属性(MVC連携)】 View & Controller ----------------------------
        self.ui = None
        # ======================================================================
        # ----- 属性(状態変数)を初期化する -------------------------------------
        self.init_attributes()
        # ======================================================================

    # ==========================================================================
    # ===== 【メソッド(初期化)】 属性(状態変数)を初期化する ====================
    # ==========================================================================
    def init_attributes( self ):
        """ 属性(状態変数)を初期化する.
        """
        # ======================================================================
        # ----- ボードの内部状態を初期化する　----------------------------------
        # ----- (ブランクのところには，位置を示す整数(1～9)が入っている) -------
        self.board = [ i for i in range( 1, 10 ) ]
        # ======================================================================
        # ----- 手番を初期化する       -----------------------------------------
        # ----- (○の番→0, ×の番→1) -----------------------------------------
        self.turn = 0
        # ----- 手数 (通し番号)を初期化する ------------------------------------
        self.seq = 1
        # ======================================================================
        # ----- 対戦結果 (空リストのときは対戦中)を初期化する ------------------
        self.result = []
        # ----- 着手可能箇所のリスト) ------------------------------------------
        # ----- (最初は，すべてのセルがブランク→着手可能) ---------------------
        self.possible_cell_list = [ i for i in range( 1, 10 ) ]
        # ----- 勝敗判定結果 ---------------------------------------------------
        self.judge = "未定"
        # ----- メッセージ -----------------------------------------------------
        self.message = ""
        # ======================================================================

    # ##########################################################################
    # ##### accessor(setter / getter) ##########################################
    # ##########################################################################

    # ==========================================================================
    # =====【メソッド(setter:MVC連携)】 ui(View & Controller)を設定する ========
    # ==========================================================================
    def set_ui( self, ui ):
        """ [setter:MVC連携] View & Controller.
        """
        # ======================================================================
        self.ui = ui
        # ======================================================================

    # ##########################################################################
    # ##### MVC連携 ############################################################
    # ##########################################################################
    
    # ==========================================================================
    # =====【メソッド(MVC連携)】 ui(View & Controller)へ変更通知する ===========
    # ==========================================================================
    def changed( self ):
        """ [MVC連携] Modelに変更があった → View & Controllerへ通知する.
        """
        # ======================================================================
        if self.ui != None:
            self.ui.update()
        # ======================================================================
    
    # ==========================================================================
    # =====【メソッド(MVC連携)】 ui(View & Controller)へ変更通知する ===========
    # ==========================================================================
    def changed_cell( self, position ):
        # ======================================================================
        """ [MVC連携] Modelに変更があった → View & Controllerへ通知する.

        Args:
            position ( int ) : セルの位置 (1～9).
        """
        # ======================================================================
        if self.ui != None:
            self.ui.update_cell( position )
        # ======================================================================
    
    # ##########################################################################
    # ##### 盤面の内部状態操作 #################################################
    # ##########################################################################

    # ==========================================================================
    # =====【メソッド(判定:盤面操作)】 整数(int)かどうか? ======================
    # ==========================================================================
    def is_int( self, data ):
        """ [判定] 整数(int)かどうか? を判定する.

        Args:
            data ( int ) : 判定対象のデータ.
            
        Returns:
            bool : 整数(int)ならTrue，さもなくばFalse.
        """
        # ======================================================================
        # ----- Pythonでは，intもオブジェクトなので，       --------------------
        # ----- intクラスのインスタンスかどうかで，判定する --------------------
        # ======================================================================
        return( isinstance( data, int ) )
        # ======================================================================
    
    # ==========================================================================
    # =====【メソッド(判定:盤面操作)】 ボードのセルが空白かどうか? =============
    # ==========================================================================
    def is_blank( self, position ):
        """ [判定] ボードのセルが空白かどうか? を判定する.

        Args:
            position ( int ) : セルの位置 (1～9).
            
        Returns:
            bool : ボードのセルが空白ならTrue，さもなくばFalse.
        """
        # ======================================================================
        # ----- 指定のセル位置が範囲内で，--------------------------------------
        # ----- セルが空白のときには，位置を表す整数がはいっていることを利用. --
        # ----- セルが空白ではないときは，文字列"○"か"×"が入っている. --------
        # ======================================================================
        return( position >= 1 and position <= 9 \
                              and self.is_int( self.board[ position - 1 ] ) )
        # ======================================================================

    # ==========================================================================
    # =====【メソッド(盤面操作)】 着手可能なセル(空白のセル)のリストを返す =====
    # ==========================================================================
    def check_possibilities( self ):
        """ [盤面操作] 着手可能なセル(空白のセル)のリストを返す.

        Returns:
            list( int ) : 着手可能なセル(空白のセル)のリスト.
        """
        # ======================================================================
        # ----- 盤面の内部表現で，要素が整数のところは，着手可能 ---------------
        # ----------------------------------------------------------------------
        # ※ 高階関数filterを用いる
        #    (iteratorオブジェクトを返すので，list()が必要)
        self.possible_cell_list = list( filter( self.is_int, self.board  ) )
        # ----------------------------------------------------------------------
        # ※ リスト内包表現を用いる
        # self.possible_cell_list = [ c for c in self.board  if self.is_int(c)]
        # ======================================================================
        return( self.possible_cell_list )
        # ======================================================================
        
    # ==========================================================================
    # =====【メソッド(盤面操作)】 石(○か×)を指定の位置に置く =================
    # ==========================================================================
    def put_stone( self, position ):
        """ [盤面操作] 石(○か×)を指定の位置に置く.

        Args:
            position ( int ) : 石を置きたい指定の位置.
            
        Returns:
            bool : 指定の位置が空白で，石が置けたならTrue，さもなくばFalse.
        """
        # ======================================================================
        if self.is_blank( position ):
            # ------------------------------------------------------------------
            # ----- 盤面の指定されたセルが空白なので，石を置くことができる -----
            # ------------------------------------------------------------------
            self.board[ position - 1 ] = self.get_stone_by_turn()
            # ------------------------------------------------------------------
            return( True )
            # ------------------------------------------------------------------
        else:
            # ------------------------------------------------------------------
            self.message = "エラー: 既に石が置かれているので，置けません."
            # ------------------------------------------------------------------
            # ---- 手数seqは進めない -------------------------------------------
            # ------------------------------------------------------------------
            return( False )
            # ------------------------------------------------------------------
        # ======================================================================

    # ==========================================================================
    # =====【メソッド(盤面操作)】 セル位置を指定して，石(○か×)を取得する =====
    # ==========================================================================
    def get_stone_in_cell( self, position ):
        """ [盤面操作] セル位置を指定して，石(○か×)を取得する.

        Args:
            position ( int ) : .

        Returns:
            str : 石の文字列表現(○か×)か空白を返す.
        """
        # ======================================================================
        stone = self.board[ position - 1 ]
        # ======================================================================
        return( "　" if self.is_int( stone ) else stone )
        # ======================================================================
    
    # ##########################################################################
    # ##### 実行制御 ###########################################################
    # ##########################################################################
        
    # ==========================================================================
    # =====【メソッド(実行制御)】ゲームを開始する ==============================
    # ==========================================================================
    def start_game( self ):
        """ [実行制御] ゲームを開始する.
        """
        # ======================================================================
        self.changed()
        # ======================================================================
        
    # ==========================================================================
    # =====【メソッド(実行制御)】ゲームをリセットする ==========================
    # ==========================================================================
    def clear_game( self ):
        """ [実行制御] ゲームをリセットする.
        """
        # ======================================================================
        self.init_attributes()
        # ======================================================================
        self.changed()
        # ======================================================================
        
    # ==========================================================================
    # =====【メソッド(実行制御)】ゲームを終了する ==============================
    # ==========================================================================
    def exit_game( self ):
        """ [実行制御] ゲームを終了する.
        """
        # ======================================================================
        import sys
        sys.exit()
        # ======================================================================
        
    # ==========================================================================
    # =====【メソッド(実行制御)】手番の石を指定の箇所に置き，手番を進める ======
    # ==========================================================================
    def put_stone_with_seq_control( self, position ):
        """ [実行制御] 手番の石を指定の箇所に置き，手番を進める.

        Args:
            position ( int ) : 石を置く位置 (1～9).
        """
        # ======================================================================
        # ----- 対戦中か決着済みか? --------------------------------------------
        # ----------------------------------------------------------------------
        if self.result != []:
            # ------------------------------------------------------------------
            self.message = "エラー: 既に勝敗がついているので，石を置けません"
            # ------------------------------------------------------------------
        elif self.put_stone( position ):
            # ------------------------------------------------------------------
            # ----- 指定したセルに，石を置く (置けなければFalseを返す) ---------
            # ------------------------------------------------------------------
            # ----- メッセージをクリアする -------------------------------------
            self.message = ""
            # ----- 勝敗判定する -----------------------------------------------
            self.result = self.check_lines()
            self.possible_cell_list = self.check_possibilities()
            # ----- 判定結果を表示し，継続する ---------------------------------
            if self.result != []:
                # ----- 手番の側の勝ちが決定した -------------------------------
                self.judge = "!!三目並びました!! → " \
                                + f"{self.get_stone_by_turn()}の勝ち"
                # --------------------------------------------------------------
            elif self.possible_cell_list == []:
                # ----- 勝ちが決定していないのに，着手可能な場所がない ---------
                self.judge = "!!引き分け!!"
                # --------------------------------------------------------------
            else:
                # ----- まだ勝敗が決定していないので，対戦を継続する -----------
                self.judge = "未定"
                self.toggle_turn()
                self.seq += 1
                # --------------------------------------------------------------
            # ------------------------------------------------------------------
        else:
            # ------------------------------------------------------------------
            # ----- 既に石の置かれた場所に置こうとした場合などの，    ----------
            # ----- エラーの場合には，手数を進めず，手番の交代もない. ----------
            # ----- エラーメッセージの表示だけ行う.                   ----------
            # ------------------------------------------------------------------
            pass
            # ------------------------------------------------------------------
        # ======================================================================
        # ----- Modelに変更があった → View & Controllerへ変更通知する ---------
        self.changed()
        # ======================================================================
        
    # ==========================================================================
    # =====【メソッド(実行制御)】 手番から，石の文字列表現を返す ===============
    # ==========================================================================
    def get_stone_by_turn( self ):
        """ 手番から，石の文字列表現を返す.

        Returns:
            str : 石の文字列表現( "○"か"×" ).
        """
        # ======================================================================
        # ----- 手番(turn): ○の番→0, ×の番→1 -------------------------------
        # ======================================================================
        return( "○" if self.turn == 0 else "×" )
        # ======================================================================

    # ==========================================================================
    # =====【メソッド(実行制御)】 手番を入れ替える =============================
    # ==========================================================================
    def toggle_turn( self ):
        """ 手番を入れ替える.
        """
        # ======================================================================
        # ----- 手番(turn): ○の番→0, ×の番→1 -------------------------------
        self.turn = ( self.turn + 1 ) % 2
        # ======================================================================

    # ==========================================================================
    # =====【メソッド(実行制御)】 手番をパスする ===============================
    # ==========================================================================
    def pass_turn( self ):
        """ 手番をパスする.
        """
        # ======================================================================
        # ----- パスのときにも手数は進める -------------------------------------
        # ----------------------------------------------------------------------
        self.message = "  パスをします．"
        self.toggle_turn()
        self.seq += 1
        # ======================================================================
        self.changed()
        # ======================================================================
        
    # ##########################################################################
    # ##### 勝敗判定 ###########################################################
    # ##########################################################################

    # ==========================================================================
    # =====【メソッド(勝敗判定)】 三目並んでいる場合，                       ===
    # =====                       その並びを意味する文字列をリストにして返す ===
    # ==========================================================================
    def check_lines( self ):
        """ 「三目並んでいる箇所」のリストを返す.

        Returns:
            list( str ) : 「三目並んでいる箇所」のリスト.
        """
        # ======================================================================
        # ----- 結果を格納するリスト -------------------------------------------
        result = []
        # ======================================================================
        # ----- 三目並んでいる箇所を意味する文字列を収集する -------------------
        for row in range( 1, 4 ):
            if self.check_row_line( row ):
                result.append( f"横({row}行目)" )
        # ----------------------------------------------------------------------
        for col in range( 1, 4 ):
            if self.check_col_line( col ):
                result.append( f"縦({col}桁目)" )
        # ----------------------------------------------------------------------
        if self.check_up_and_to_the_right_line():
            result.append( "斜め上" )
        # ----------------------------------------------------------------------
        if self.check_down_and_to_the_right_line():
            result.append( "斜め下" )
        # ======================================================================
        return( result )
        # ======================================================================
        
    # ==========================================================================
    # =====【メソッド(判定)】 横に三目並んでいるか? (行番号1～3を指定する) =====
    # ==========================================================================
    def check_row_line( self, row ):
        """ [判定] 横に三目並んでいるか? を判定する.

        Args:
            row ( int ) : 行番号.
            
        Returns:
            bool : 横に三目並んでいるならTrue，さもなくばFalse.
        """
        # ======================================================================
        p = ( row - 1 ) * 3
        # ======================================================================
        return( self.board[ p ] == self.board[ p + 1 ] == self.board[ p + 2 ] )
        # ======================================================================
    
    # ==========================================================================
    # =====【メソッド(判定)】 縦に三目並んでいるか? (桁番号1～3を指定する) =====
    # ==========================================================================
    def check_col_line( self, col ):
        """ [判定] 縦に三目並んでいるか? を判定する.

        Args:
            col ( int ) : 桁番号.

        Returns:
            bool : 縦に三目並んでいるならTrue，さもなくばFalse.
        """
        # ======================================================================
        p = col - 1
        # ======================================================================
        return( self.board[ col - 1 ] == self.board[ 3 + p ] \
                                      == self.board[ 6 + p ] )
        # ======================================================================

    # ==========================================================================
    # =====【メソッド(判定)】 斜め上方向に三目並んでいるか? ====================
    # ==========================================================================
    def check_up_and_to_the_right_line( self ):
        """ [判定] 斜め上方向に三目並んでいるか? を判定する.

        Returns:
            bool : 斜め上方向に三目並んでいるならTrue，さもなくばFalse.
        """
        # ======================================================================
        # ----- リストは，ゼロ始まりなので，7-5-3が6-4-2となる点に注意 ---------
        # ======================================================================
        return( self.board[ 6 ] == self.board[ 4 ] == self.board[ 2 ] )
        # ======================================================================

    # ==========================================================================
    # =====【メソッド(判定)】 斜め下方向に三目並んでいるか? ====================
    # ==========================================================================
    def check_down_and_to_the_right_line( self ):
        """ [判定] 斜め下方向に三目並んでいるか? を判定する.

        Returns:
            bool : 斜め下方向に三目並んでいるならTrue，さもなくばFalse.
        """
        # ======================================================================
        # ----- リストは，ゼロ始まりなので，1-5-9が0-4-8となる点に注意 ---------
        # ======================================================================
        return( self.board[ 0 ] == self.board[ 4 ] == self.board[ 8 ] )
        # ======================================================================

# ==============================================================================
# ===== 【クラス】 TicTacToe(三目並べ)のGUI(View & Controller) =================
# ==============================================================================
class TicTacToe_gui():
    """ GUI部品など.

    * GUI部品の初期設定
    * 操作と表示
      * ボード自体は，ViewとControllerを分離しにくい．
    """
    # ==========================================================================
    
    # ##########################################################################
    # ##### 初期化 #############################################################
    # ##########################################################################
    
    # ==========================================================================
    # ===== 【メソッド(初期化)】 イニシャライザ ================================
    # ==========================================================================
    def __init__( self, model, master ):
        """ イニシャライザ.

        Args:
            model  ( TicTacToe ) : モデル(tic-tac-toeゲーム).
            master ( tk.Tk / tk.Toplevel / tk.Frame ) : 親ウィジェット.
        """
        # ======================================================================
        # ----- 【属性(Model)】
        self.model = model
        # ======================================================================
        # ----- 【属性(GUI部品)】 ルート・ウィンドウ ---------------------------
        self.master = master
        # ======================================================================
        # ----- 【属性(GUI部品)】 表示パネル -----------------------------------
        self.panel_view    = None
        # ----------------------------------------------------------------------
        # ----- 【属性(GUI部品)】 制御パネル -----------------------------------
        self.panel_control = None
        # ======================================================================
        # ----- 【属性(GUI部品)】 ボードビュー (ボタンのリスト)        ---------
        # -----                   ※ 画面上は，gridで格子状に配置する) ---------
        self.board_view = None
        # ======================================================================
        # ===== ステータスビューの中の表示ラベル ===============================
        # ======================================================================
        # ----- 【属性(GUI部品)】 手数の表示ラベル -----------------------------
        self.label_seq = None
        # ----------------------------------------------------------------------
        # ----- 【属性(GUI部品)】 手番の表示ラベル -----------------------------
        self.label_turn = None
        # ----------------------------------------------------------------------
        # ----- 【属性(GUI部品)】 盤面の内部表現の表示ラベル -------------------
        self.label_board = None
        # ----------------------------------------------------------------------
        # ----- 【属性(GUI部品)】 対戦結果の表示ラベル -------------------------
        self.label_result = None
        # ----------------------------------------------------------------------
        # ----- 【属性(GUI部品)】 着手可能箇所のリストの表示ラベル -------------
        self.label_possible_cell_list = None
        # ----------------------------------------------------------------------
        # ----- 【属性(GUI部品)】 勝敗判定の表示ラベル -------------------------
        self.label_judge = None
        # ----------------------------------------------------------------------
        # ----- 【属性(GUI部品)】 勝敗判定の表示ラベル -------------------------
        self.label_message = None
        # ======================================================================
        # ----- 属性(GUI部品)を初期化する --------------------------------------
        self.init_components()
        # ======================================================================
        # ----- [MVC連携] ModelにView & Controllerを設定する -------------------
        self.model.set_ui( self )
        # ======================================================================

    # ==========================================================================
    # ===== 【メソッド(初期化)】 GUI部品を初期化する ===========================
    # ==========================================================================
    def init_components( self ):
        """ GUI部品を初期化する.
        """
        # ======================================================================
        # ----- 表示パネルを作成する -------------------------------------------
        self.panel_view    = self.init_panel_view(    self.master )
        # ----------------------------------------------------------------------
        # ----- 制御パネルを作成する -------------------------------------------
        self.panel_control = self.init_panel_control( self.master )
        # ======================================================================
        
    # ==========================================================================
    # =====【メソッド(初期化:GUI部品)】 状態表示パネルを初期化する =============
    # ==========================================================================
    def init_panel_view_status( self, master ):
        """ [初期化:GUI部品] 状態表示パネルを初期化する.

        Args:
            master ( tk.Tk / tk.Toplevel / tk.Frame ) : 親ウィジェット.

        Returns:
            tk.Frame : 状態表示パネル..
        """
        # ======================================================================
        # ----- 状態表示パネルを生成する ---------------------------------------
        self.panel_view_status = tk.Frame( master )
        # ----- 状態表示パネルを配置する ---------------------------------------
        self.panel_view_status.pack( side=tk.TOP )
        # ======================================================================
        # ----- 状態表示パネルの中身を作成する ---------------------------------
        # ----------------------------------------------------------------------
        # ----- 手数の表示用ラベル
        self.label_seq     = tk.Label( self.panel_view_status, text="" )
        # ----- 手番の表示用ラベル
        self.label_turn    = tk.Label( self.panel_view_status, text="" )
        # ----- 盤面の内部表現の表示用ラベル
        self.label_board   = tk.Label( self.panel_view_status, text="" )
        # ----- 対戦結果の表示用ラベル
        self.label_result  = tk.Label( self.panel_view_status, text="" )
        # ----- 着手可能箇所の表示用ラベル
        self.label_possible_cell_list \
                           = tk.Label( self.panel_view_status, text="" )
        # ----- 勝敗判定の表示用ラベル
        self.label_judge   = tk.Label( self.panel_view_status, text="" )
        # ----- メッセージの表示用ラベル
        self.label_message = tk.Label( self.panel_view_status, text="" )
        # ======================================================================
        # ----- 状態表示ラベル群を配置する -------------------------------------
        self.label_seq.grid(                row=0, column=0 )
        self.label_turn.grid(               row=0, column=1 )
        self.label_board.grid(              row=2, column=0, columnspan=2 )
        self.label_result.grid(             row=3, column=0, columnspan=2 )
        self.label_possible_cell_list.grid( row=4, column=0, columnspan=2 )
        self.label_judge.grid(              row=5, column=0, columnspan=2 )
        self.label_message.grid(            row=6, column=0, columnspan=2 )
        # ======================================================================
        return( self.panel_view_status )
        # ======================================================================

    # ==========================================================================
    # =====【メソッド(初期化:GUI部品)】 盤面表示パネルを初期化する =============
    # ==========================================================================
    def init_panel_view_board( self, master ):
        """ [初期化:GUI部品] 盤面表示パネルを初期化する.

        Args:
            master ( tk.Tk / tk.Toplevel / tk.Frame ) : 親ウィジェット.

        Returns:
            tk.Frame : 盤面表示パネル.
        """
        # ======================================================================
        # ----- 盤面表示パネルを作成する ---------------------------------------
        self.panel_view_board = tk.Frame( master )
        # ----------------------------------------------------------------------
        # ----- 盤面表示パネルを配置する ---------------------------------------
        self.panel_view_board.pack( side=tk.TOP )
        # ======================================================================
        # ----- 盤面表示パネルの中身を作成する ---------------------------------
        self.board_view = []
        # ----------------------------------------------------------------------
        for i in range( 9 ):
            # ----- セル・ボタンのテキスト -------------------------------------
            button_cell_text = "　"
            # button_text = str( i + 1 )
            # ----- セル・ボタンを生成する -------------------------------------
            button_cell = \
                tk.Button( self.panel_view_board,
                        text=button_cell_text,
                        command=self.create_callback_func_cell_clicked( i + 1 ) )
            # ----- セル・ボタンを配置する -------------------------------------
            button_cell.grid( row=int(i/3), column=i%3 )
            # ----- セル・ボタンを記録する -------------------------------------
            self.board_view.append( button_cell )
            # ------------------------------------------------------------------
        # ======================================================================
        return( self.panel_view_board )
        # ======================================================================

    # ==========================================================================
    # =====【メソッド(初期化:GUI部品)】 表示パネルを初期化する =================
    # ==========================================================================
    def init_panel_view( self, master ):
        """ [初期化:GUI部品] 表示パネルを初期化する.

        Args:
            master ( tk.Tk / tk.Toplevel / tk.Frame ) : 親ウィジェット.

        Returns:
            tk.Frame : 表示パネル.
        """
        # ======================================================================
        # ----- 制御パネルを生成する -------------------------------------------
        self.panel_view = tk.Frame( master )
        # ----------------------------------------------------------------------
        # ----- 制御パネルを配置する -------------------------------------------
        self.panel_view.pack( side=tk.TOP )
        # ======================================================================
        # ----- 状態表示パネルを初期化する -------------------------------------
        self.init_panel_view_status( self.panel_view )
        # ----------------------------------------------------------------------
        # ----- 盤面表示パネルを初期化する -------------------------------------
        self.init_panel_view_board(  self.panel_view )
        # ======================================================================
        return( self.panel_view )
        # ======================================================================
       
    # ==========================================================================
    # =====【メソッド(初期化:GUI部品)】 制御パネルを初期化する =================
    # ==========================================================================
    def init_panel_control( self, master ):
        """ [初期化:GUI部品] 制御パネルを初期化する.

        Args:
            master ( tk.Tk / tk.Toplevel / tk.Frame ) : 親ウィジェット.

        Returns:
            tk.Frame : 制御パネル.
        """
        # ======================================================================
        # ----- 制御パネルを生成する -------------------------------------------
        self.panel_control = tk.Frame( master )
        # ----------------------------------------------------------------------
        # ----- 制御パネルを配置する -------------------------------------------
        self.panel_control.pack( side=tk.TOP )
        # ======================================================================
        # ----- パス・ボタンを生成する -----------------------------------------
        self.button_pass  = tk.Button( self.panel_control, text="パス",
                                       command=self.on_pass_clicked )
        # ----------------------------------------------------------------------
        # ----- クリア・ボタンを生成する ---------------------------------------
        self.button_clear = tk.Button( self.panel_control, text="クリア",
                                       command=self.on_clear_clicked )
        # ----------------------------------------------------------------------
        # ----- 終了・ボタンを生成する -----------------------------------------
        self.button_exit  = tk.Button( self.panel_control, text="終了",
                                       command=self.on_exit )
        # ======================================================================
        # ----- ボタン群を配置する (横一列) ------------------------------------
        self.button_pass.grid(  row=0, column=0 )
        self.button_clear.grid( row=0, column=1 )
        self.button_exit.grid(  row=0, column=2 )
        # ======================================================================
        return( self.panel_control )
        # ======================================================================
        

    # ##########################################################################
    # ##### MVC連携: ModelからのView更新 #######################################
    # ##########################################################################
    
    # ==========================================================================
    # ===== 【メソッド(MVC連携)】 Modelの状態変数に変更があったので， ==========
    # =====                       Viewを更新する                      ==========
    # ==========================================================================
    def update( self ):
        """ [MVC連携] Modelの状態変数に変更があったので，Viewを更新する.
        """
        # ======================================================================
        # ----- 各種状態の変更   → Viewを更新する -----------------------------
        self.update_status()
        # ----- メッセージの変更 → Viewを更新する -----------------------------
        self.update_message()
        # ----- 盤面状態の変更   → Viewを更新する -----------------------------
        self.update_board()
        # ======================================================================
        
    # ==========================================================================
    # ===== 【メソッド(MVC連携)】 Modelの各種状態の変更 → Viewを更新する ======                   
    # ==========================================================================
    def update_status( self ):
        """ [MVC連携] Modelの各種状態の変更 → Viewを更新する.
        """
        # ======================================================================
        # ----- 手数ラベルを更新する -------------------------------------------
        self.label_seq[     "text" ] = f"手数 = {self.model.seq}"
        # ----------------------------------------------------------------------
        # ----- 手番ラベルを更新する -------------------------------------------
        self.label_turn[    "text" ] = f"手番 = {self.model.get_stone_by_turn()}"
        # ----------------------------------------------------------------------
        # ----- 盤面の内部表現ラベルを更新する ---------------------------------
        self.label_board[   "text" ] = f"内部表現 = {self.model.board}"
        # ----------------------------------------------------------------------
        # ----- 対戦結果ラベルを更新する ---------------------------------------
        self.label_result[  "text" ] = f"三連箇所の検索結果 = {self.model.result}"
        # ----------------------------------------------------------------------
        # ----- 着手可能箇所リスト・ラベルを更新する ---------------------------
        self.label_possible_cell_list[ "text" ] = \
                        f"  着手可能なセル = {self.model.possible_cell_list}"
        # ----------------------------------------------------------------------
        # ----- 勝敗判定ラベルを更新する ---------------------------------------
        self.label_judge[   "text" ] = f"勝敗判定 = {self.model.judge}"
        # ======================================================================
        
    # ==========================================================================
    # ===== 【メソッド(MVC連携)】 Modelのメッセージの変更 → Viewを更新する ====                   
    # ==========================================================================
    def update_message( self ):
        """ メッセージ・ラベルを更新する.
        """
        # ======================================================================
        self.label_message[ "text" ] = f"{self.model.message}"
        # ======================================================================
        
    # ==========================================================================
    # ===== 【メソッド(MVC連携)】 Modelの盤面状態の変更 → Viewを更新する ======
    # ==========================================================================
    def update_board( self ):
        """ Modelの盤面状態を更新する.
        """
        # ======================================================================
        for i in range( 9 ):
            self.board_view[ i ][ "text" ] = \
                                         self.model.get_stone_in_cell( i + 1 )
        # ======================================================================

    # ==========================================================================
    # ===== 【メソッド(MVC連携)】 Modelの盤面セル状態の変更 → Viewを更新する ==                   
    # ==========================================================================
    def update_cell( self, position ):
        """ Modelの盤面セル状態を更新する.

        Args:
            position ( int ) : セル位置 (1～9).
        """
        # ======================================================================
        self.board_view[ position -1 ][ "text" ] = \
                                         self.model.board[ position - 1 ]
        # ======================================================================

    # ##########################################################################
    # ##### MVC連携: View & ControllerからのModel更新 ##########################
    # ##########################################################################

    # ==========================================================================
    # =====【メソッド】 指定した位置のセル・ボタンがクリックされた =============
    # =====             ときのコールバック関数を生成する           =============
    # ==========================================================================
    def create_callback_func_cell_clicked( self, position ):
        """ 指定した位置のセル・ボタンがクリックされたときのコールバック関数を
        生成する高階関数．

        * クロージャー(closure;閉包)を内包し，外側のスコープで，
          closureにとっての自由変数であるpositionを
          提供するエンクロージャー(enclosure)に相当する.

        Args:
            position ( int ) : セル・ボタンの添字.

        Returns:
            func : 指定した位置のセル・ボタンがクリックされたときの
                   コールバック関数.
        """
        # ======================================================================

        
        # ======================================================================
        # ===== 【関数(コールバック)】 セル・ボタンのイベント・ハンドラ ========
        # ======================================================================
        def on_cell_clicked():
            """ 指定した位置のセル・ボタンがクリックされたときのコールバック関数.

            * クロージャー(closure;閉包).
              * positionの値は，nonlocal position宣言で束縛しない限り，
                参照はできるが，代入はできない
            """
            # ==================================================================
            # ----- スコープの内側で，関数( inner function )を定義する ---------
            # ----- (セル位置positionが固定された，コールバック関数)   ---------
            # ==================================================================
            self.model.put_stone_with_seq_control( position )
            # ==================================================================

        # ======================================================================
        # ----- positonを固定したコールバック関数を返す ------------------------
        # ======================================================================
        return( on_cell_clicked )
        # ======================================================================


    # ##########################################################################
    # ##### MVC連携: ControllerからのModel更新 #################################
    # ##########################################################################

    # ==========================================================================
    # ===== 【メソッド(コールバック)】 パス・ボタンのイベント・ハンドラ ========
    # ==========================================================================
    def on_pass_clicked( self ):
        """ [コールバック] パス・ボタンのイベント・ハンドラ.
        """
        # ======================================================================
        # ----- パスする -------------------------------------------------------
        self.model.pass_turn()
        # ======================================================================
        
    # ==========================================================================
    # ===== 【メソッド(コールバック)】 クリア・ボタンのイベント・ハンドラ ======
    # ==========================================================================
    def on_clear_clicked( self ):
        """ [コールバック] クリア・ボタンのイベント・ハンドラ.
        """
        # ======================================================================
        # ----- ゲームをリセットする -------------------------------------------
        self.model.clear_game()
        # ======================================================================

    # ==========================================================================
    # ===== 【メソッド(コールバック)】 終了ボタンのイベント・ハンドラ ==========
    # ==========================================================================
    def on_exit( self ):
        """ [コールバック] 終了ボタンのイベント・ハンドラ.
        """
        # ======================================================================
        # ----- メイン・ウィンドウを閉じる -------------------------------------
        self.master.destroy()
        # ======================================================================
        # ----- ゲームを終了する -----------------------------------------------
        self.model.exit_game()
        # ======================================================================

# ==============================================================================
# ===== 【クラス】 アプリケーション ============================================
# ==============================================================================
class App():
    """ アプリケーション.
    """
    # ==========================================================================

    # ==========================================================================
    # =====【メソッド(初期化)】 イニシャライザ =================================
    # ==========================================================================
    def __init__( self ):
        """ イニシャライザ.
        """
        # ======================================================================
        # ----- ルート・ウィンドウを取得する -----------------------------------
        self.main_window = tk.Tk()
        # ======================================================================
        # ----- メイン・ウィンドウを初期化する ---------------------------------
        self.init_main_window()
        # ======================================================================
        # ----- Tic-Tac-Toe(三目並べ)のモデルを生成する ------------------------
        self.game = TicTacToe()
        # ======================================================================
        # ----- モデルをGUI(View&Controller)でラップする -----------------------
        self.game_gui = TicTacToe_gui( self.game, master=self.main_window )
        # ======================================================================
        # ----- ゲームを開始する -----------------------------------------------
        self.game.start_game()
        # ======================================================================

    # ==========================================================================
    # =====【メソッド(初期化:GUI部品)】 メイン・ウィンドウを初期化する =========
    # ==========================================================================
    def init_main_window( self ):
        """ [初期化:GUI部品]メイン・ウィンドウを初期化する .
        """
        # ======================================================================
        # ----- メイン・ウィンドウのタイトルを設定する -------------------------
        self.main_window.title( "三目並べ (Tic-Tac-Toe)" )
        # ----- メイン・ウィンドウの位置と大きさを設定する ---------------------
        self.main_window.geometry( "320x240+200+100" )
        # ======================================================================
        # ----- メイン・ウィンドウのメニューバーを作成し，設定する -------------
        # menubar = create_menubar( self.main_window )
        # self.main_window.config( menu=menubar )
        # ======================================================================
    
    # ==========================================================================
    # =====【メソッド】 アプリケーションを実行する =============================
    # ==========================================================================
    def run( self ):
        """ アプリケーションを実行する(メイン・ループ).
        """
        # ======================================================================
        self.main_window.mainloop()
        # ======================================================================

    # ==========================================================================
    # =====【メソッド】 メイン・ウィンドウを閉じる =============================
    # ==========================================================================
    def destroy( self ):
        """ メイン・ウィンドウを閉じる.
        """
        # ======================================================================
        self.main_window.destroy()
        # ======================================================================
    
# ==============================================================================
# =====【メイン関数】 Tic-Tac-Toe(三目並べ)ゲーム ==============================
# ==============================================================================
def main():
    """ [メイン関数] Tic-Tac-Toe(三目並べ)ゲーム.
    """
    # ==========================================================================
    app = App()
    # ==========================================================================
    app.run()
    # ==========================================================================
    
# ==============================================================================
# =====【スクリプト】 メイン・スクリプト =======================================    
# ==============================================================================
if __name__ == "__main__":
    main()
# ==============================================================================

