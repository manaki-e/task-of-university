
# ==============================================================================
# 345678901234567890123456789012345678901234567890123456789012345678901234567890
# ==============================================================================
"""
EasyAIに基づくTicTacToe対戦プログラム

    2021-05-19 IIJIMA, Tadashi
    (Original: Copyright (c) 2013 Zulko The MIT License)

  * 本来は，pip install easyAIで使用可能になるが...
    * 今回はこの先の改良のためにあえてソースコードを取り込んでいる．
    * https://pypi.org/project/easyAI/
  * ソースコード入手元:
    * https://github.com/Zulko/easyAI
"""
 
# ==============================================================================
from Game     import TwoPlayersGame
from Player   import Human_Player, AI_Player
from Negamax  import Negamax
# ==============================================================================

# ==============================================================================
# ===== 【クラス】 TicTacToe ===================================================
# ==============================================================================
class TicTacToe( TwoPlayersGame ):
    """ 盤面のナンバリング:
            7 8 9
            4 5 6
            1 2 3
    """
    # ==========================================================================

    # ==========================================================================
    # ===== [初期化] イニシャライザ ==========================================
    # ==========================================================================
    def __init__( self, players ):
        """ 初期化する.
        """
        # ======================================================================
        self.players = players
        self.board   = [ 0 for i in range( 9 ) ]
        self.nplayer = 1 # player 1 starts.
        # ======================================================================
    
    # ==========================================================================
    # ===== [メソッド] 次に打つことが可能な手のリストを返す ====================
    # ==========================================================================
    def possible_moves( self ):
        """ 次に打つことが可能な手のリストを返す.

          * TicTacToeの場合，空白なセルは，すべて打つことができる．
        """
        # ======================================================================
        return( [ i + 1 for i, e in enumerate( self.board ) if e == 0 ] ) 
        # ======================================================================
    
    # ==========================================================================
    # ===== [メソッド] 指定した手を打つ ========================================
    # ==========================================================================
    def make_move( self, move ):
        """ 指定した手を打つ.
        """
        # ======================================================================
        self.board[ int( move ) - 1 ] = self.nplayer
        # ======================================================================
    
    # ==========================================================================
    # ===== [メソッド] 手を取り消す（そのセルを空白にする) =====================
    # ==========================================================================
    def unmake_move( self, move ): # optional method (speeds up the AI)
        """ 手を取り消す.
        """
        # ======================================================================
        self.board[ int( move ) - 1 ] = 0
        # ======================================================================
    
    # ==========================================================================
    # ===== [メソッド] 勝敗判定: 負けが決まったか?  ============================
    # ==========================================================================
    def lose( self ):
        """ 勝敗判定: 負けが決まった場合にTrue，さもなくばFalseを返す. 
        """
        # ======================================================================
        return( any( [ all( [ ( self.board[ c-1 ] == self.nopponent )
                                                            for c in line ] )
                      for line in [ [1,2,3], [4,5,6], [7,8,9], # horiz.
                                    [1,4,7], [2,5,8], [3,6,9], # vertical
                                    [1,5,9], [3,5,7]           # diagonal
                                  ]
                    ] ) )
        # ======================================================================
    
    # ==========================================================================
    # ===== [メソッド] 終了判定 ================================================
    # ==========================================================================
    def is_over( self ):
        """ 終了判定.
        """
        # ======================================================================
        return( ( self.possible_moves() == [] ) or self.lose() )
        # ======================================================================

    # ==========================================================================
    # ===== [メソッド] 盤面を表示する ==========================================
    # ==========================================================================
    def show( self ):
        """ 盤面を表示する.
        """
        # ======================================================================
        # =========== GUIがあるため、盤面を表示しない（追加） =============
        return
        # ===================================================
        print( '\n'+'\n'.join( [    
                    ' '.join([['.','O','X'][self.board[3*j+i]]
                                                            for i in range(3)])
                 for j in range(3)]) )
        # ======================================================================
    
    # ==========================================================================
    # ===== [メソッド] 評価値(負けなら-100点，さもなくば0点)を返す =============
    # ==========================================================================
    def scoring( self ):
        """ 評価値(負けなら-100点，さもなくば0点)を返す.
        """
        # ======================================================================
        return( -100 if self.lose() else 0 )
        # ======================================================================

# ==============================================================================
# ===== [関数] メイン関数 ======================================================
# ==============================================================================
def main():
    """ メイン関数.
    """
    # ==========================================================================
    # ----- 深さ6のNegaMax法 -----
    ai_algo = Negamax( 6 )
    # ----- 人間のプレイヤ―とAIプレイヤーが対戦する ---------------------------
    TicTacToe( [ Human_Player(), AI_Player( ai_algo ) ] ).play()
    # ==========================================================================


# ==============================================================================
# ===== [スクリプト] メイン・スクリプト ========================================
# ==============================================================================
if __name__ == "__main__":
    main()
# ==============================================================================
